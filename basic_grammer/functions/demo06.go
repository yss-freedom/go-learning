package main

//可变参数函数
/*
当一个函数的参数类型确定，参数的个数不确定，可以使用可变参数
可变参数函数是一种可以接受可变数量的参数的函数，通过使用三个省略号…来声明可变参数，可以使得函数接受任意数量的相同类型的参数。
可变参数函数在调用时，传递给函数的参数会被当作一个切片传递给函数。在函数内部，可以使用切片来访问和操作这些参数。
类似于python中的普通收集参数

func functionName(参数名 ... 参数类型) returnType {
    // 函数体
    return returnValue // 可选
}

这里面参数名表示的参数是一个切片，可以循环取出里面的值
如果函数有其他指定的参数，可变参数必须放在函数的最后一个参数位置。比如下面的可变参数nums，放在函数的最后一个参数位置
*/

import "fmt"

func main() {
	fmt.Println(getSum(10, 20, 30))
}

// 可变参数： 一个函数的参数类型确定，参数的个数不确定，可以使用可变参数
// 可变参数如果有多个参数必须放在最后一个参数

// 求和 , 参数是可变的，int
func getSum(nums ...int) int {
	sum := 0
	fmt.Println("可变参数的长度为：", len(nums))
	//循环通过下标取出nums中的值
	for i := 0; i < len(nums); i++ {
		fmt.Println("可变参数下标", i, ":", nums[i])
		// 取出来
		//sum = sum + nums[i]
		sum += nums[i]
	}
	return sum
}

// 接收多个参数 nums 可变参数
// 使用下标来接收，下标是从0开始的
// nums : 100,200,300,400,500
// nums[0] = 100
// nums[1] = 200
// nums[2] = 300

// 了解传递了多少个数字  len()函数，获取可变参数的长度
