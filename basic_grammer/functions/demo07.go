package main

/*
函数的参数传递
Go语言默认使用按值传递，这意味着传递给函数的参数是原始数据的副本。对副本的任何修改都不会影响原始数据。但是，如果传递的是指针，则可以通过指针修改原始数据。
调用函数时，可以通过两种方式来传递参数：一种是值传递，另一种是引用传递。
值传递是指在调用函数时，将实际参数复制一份传递到函数中。这样，在函数中如果对参数进行修改，将不会影响到实际参数。
引用传递是指在调用函数时，将实际参数的地址传递到函数中。这样，在函数中对参数所进行的修改，将影响到实际参数。
默认情况下，Go语言使用的是值传递，即在调用过程中不会影响到实际参数。
*/
//值传递

//import "fmt"
//
//func increment(x int) {
//	x++ // 只修改了副本
//}
//
//func main() {
//	y := 5
//	increment(y)
//	fmt.Println(y) // 输出: 5，因为y的值没有被修改
//}

//示例：按引用传递（通过指针）
//引用传递，在定义函数时和参数操作时，都要在参数类型或参数名的前面加*
import "fmt"

func increment(x *int) {
	*x++ // 修改了原始数据
}

func main() {
	y := 5
	increment(&y)
	fmt.Println(y) // 输出: 6，因为y的值被修改了
}
