package main

import "fmt"

/*
在Go语言中，指针是一种特殊的变量类型，它用于存储变量的内存地址。
通过指针，程序可以直接访问和修改变量的值，这在处理大型数据结构、优化内存使用和提高程序性能时非常有用。
本文将结合具体案例，详细讲解Go语言中指针的用法，包括定义指针、使用指针访问和修改变量值、指针作为函数参数和返回值、指针数组和切片、结构体指针、空指针检查等。
*/

func changeValue(a *int) {
	*a = 20
}
func main() {
	//指针的基本概念
	//指针是指向内存地址的变量。在Go语言中，使用*操作符来声明一个指针变量。例如：
	//var p *int // 声明一个指向int型变量的指针
	//这里p是一个整型指针，它存储的是一个整型变量的内存地址。
	//通过在变量名前加上&符号，可以获取变量的内存地址。例如
	//var x int = 10
	//var p *int = &x // p存储了x的地址
	////通过在指针变量前加上*符号，可以访问指针指向的值。例如
	//fmt.Println(*p)
	// 使用new函数创建指针
	//new函数用于创建一个指定类型的零值指针变量。例如：
	p := new(int) // 创建一个int类型的零值指针变量
	*p = 42       // 通过指针设置值
	fmt.Println("Value stored in p:", *p)

	//将指针作为函数参数，可以在函数内部修改原始变量的值，从而避免函数对变量进行拷贝，提高程序的性能。例如：
	x := 10
	fmt.Println("Before:", x)
	changeValue(&x)
	fmt.Println("After:", x)
	//这表明我们通过指针修改了x的值。

}
