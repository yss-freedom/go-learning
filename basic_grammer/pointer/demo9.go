//指针的指针
/*
指针的套娃，指针指向指针 , 指针类型 第一个*指针类型， *int是这个指针对应的类型。
如何理解多个符号，第一个取出来后，后面就是它存的类型 *(*(int))
*/
package main

import "fmt"

func main() {

	// 声明 普通变量
	var a int = 10

	// 声明 指针变量，指向a， 指针其实就是一个特殊的变量而已。，ptr命名  p
	// 定义变量格式  var ptr *类型
	var p *int
	p = &a // 指针变量赋值

	// 指针的套娃，指针指向指针 , 指针类型 第一个*指针类型， *int是这个指针对应的类型
	// 如何理解多个符号，第一个取出来后，后面就是它存的类型 *(*(int))
	var ptr **int
	ptr = &p
	//
	fmt.Printf("ptr变量存储的指针的地址：%p\n", ptr) //就是p的地址
	fmt.Printf("ptr变量自己的地址：%p\n", &ptr)
	fmt.Printf("*ptr变量存储的地址：%p\n", *ptr)     //就是p存的指针的地址
	fmt.Printf("*ptr变量存储的地址中的值：%d\n", **ptr) //就是p存的指针的地址指向的值，即是a的值
	// 修改变量a就有了无数种方式
	**ptr = 1111
	fmt.Println(a)
}

/*
总结
指针在Go语言中是一种非常强大的工具，它允许我们直接访问和修改内存中的值，
优化内存使用和提高程序性能。然而，过度使用指针也可能导致代码难以理解和维护，
还可能引发内存泄漏和悬空指针等问题。因此，在使用指针时要谨慎，并遵循Go语言的指针使用规范。
*/
